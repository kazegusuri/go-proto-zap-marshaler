// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: examples/example.proto

package examples

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/kazegusuri/go-proto-zap-marshaler"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NumericEnum int32

const (
	NumericEnum_ZERO NumericEnum = 0
	NumericEnum_ONE  NumericEnum = 1
	NumericEnum_TWO  NumericEnum = 2
)

// Enum value maps for NumericEnum.
var (
	NumericEnum_name = map[int32]string{
		0: "ZERO",
		1: "ONE",
		2: "TWO",
	}
	NumericEnum_value = map[string]int32{
		"ZERO": 0,
		"ONE":  1,
		"TWO":  2,
	}
)

func (x NumericEnum) Enum() *NumericEnum {
	p := new(NumericEnum)
	*p = x
	return p
}

func (x NumericEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumericEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_examples_example_proto_enumTypes[0].Descriptor()
}

func (NumericEnum) Type() protoreflect.EnumType {
	return &file_examples_example_proto_enumTypes[0]
}

func (x NumericEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumericEnum.Descriptor instead.
func (NumericEnum) EnumDescriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{0}
}

type AliasedEnum int32

const (
	AliasedEnum_UNKNOWN AliasedEnum = 0
	AliasedEnum_STARTED AliasedEnum = 1
	AliasedEnum_RUNNING AliasedEnum = 1
)

// Enum value maps for AliasedEnum.
var (
	AliasedEnum_name = map[int32]string{
		0: "UNKNOWN",
		1: "STARTED",
		// Duplicate value: 1: "RUNNING",
	}
	AliasedEnum_value = map[string]int32{
		"UNKNOWN": 0,
		"STARTED": 1,
		"RUNNING": 1,
	}
)

func (x AliasedEnum) Enum() *AliasedEnum {
	p := new(AliasedEnum)
	*p = x
	return p
}

func (x AliasedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AliasedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_examples_example_proto_enumTypes[1].Descriptor()
}

func (AliasedEnum) Type() protoreflect.EnumType {
	return &file_examples_example_proto_enumTypes[1]
}

func (x AliasedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AliasedEnum.Descriptor instead.
func (AliasedEnum) EnumDescriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{1}
}

type EnumMessage_Nested int32

const (
	EnumMessage_UNKNOWN   EnumMessage_Nested = 0
	EnumMessage_PENDING   EnumMessage_Nested = 1
	EnumMessage_COMPLETED EnumMessage_Nested = 2
)

// Enum value maps for EnumMessage_Nested.
var (
	EnumMessage_Nested_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "COMPLETED",
	}
	EnumMessage_Nested_value = map[string]int32{
		"UNKNOWN":   0,
		"PENDING":   1,
		"COMPLETED": 2,
	}
)

func (x EnumMessage_Nested) Enum() *EnumMessage_Nested {
	p := new(EnumMessage_Nested)
	*p = x
	return p
}

func (x EnumMessage_Nested) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumMessage_Nested) Descriptor() protoreflect.EnumDescriptor {
	return file_examples_example_proto_enumTypes[2].Descriptor()
}

func (EnumMessage_Nested) Type() protoreflect.EnumType {
	return &file_examples_example_proto_enumTypes[2]
}

func (x EnumMessage_Nested) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumMessage_Nested.Descriptor instead.
func (EnumMessage_Nested) EnumDescriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{8, 0}
}

type NotLoggingEnumMessage_Nested int32

const (
	NotLoggingEnumMessage_UNKNOWN   NotLoggingEnumMessage_Nested = 0
	NotLoggingEnumMessage_PENDING   NotLoggingEnumMessage_Nested = 1
	NotLoggingEnumMessage_COMPLETED NotLoggingEnumMessage_Nested = 2
)

// Enum value maps for NotLoggingEnumMessage_Nested.
var (
	NotLoggingEnumMessage_Nested_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "COMPLETED",
	}
	NotLoggingEnumMessage_Nested_value = map[string]int32{
		"UNKNOWN":   0,
		"PENDING":   1,
		"COMPLETED": 2,
	}
)

func (x NotLoggingEnumMessage_Nested) Enum() *NotLoggingEnumMessage_Nested {
	p := new(NotLoggingEnumMessage_Nested)
	*p = x
	return p
}

func (x NotLoggingEnumMessage_Nested) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotLoggingEnumMessage_Nested) Descriptor() protoreflect.EnumDescriptor {
	return file_examples_example_proto_enumTypes[3].Descriptor()
}

func (NotLoggingEnumMessage_Nested) Type() protoreflect.EnumType {
	return &file_examples_example_proto_enumTypes[3]
}

func (x NotLoggingEnumMessage_Nested) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotLoggingEnumMessage_Nested.Descriptor instead.
func (NotLoggingEnumMessage_Nested) EnumDescriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{9, 0}
}

type SimpleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BoolValue   bool   `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
}

func (x *SimpleMessage) Reset() {
	*x = SimpleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMessage) ProtoMessage() {}

func (x *SimpleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMessage.ProtoReflect.Descriptor instead.
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleMessage) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *SimpleMessage) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

type NotLoggingSimpleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BoolValue   bool   `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
}

func (x *NotLoggingSimpleMessage) Reset() {
	*x = NotLoggingSimpleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingSimpleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingSimpleMessage) ProtoMessage() {}

func (x *NotLoggingSimpleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingSimpleMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingSimpleMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{1}
}

func (x *NotLoggingSimpleMessage) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *NotLoggingSimpleMessage) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

type NumberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValue    float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	DoubleValue   float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	Int32Value    int32   `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value   uint32  `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   uint64  `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value   int32   `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value   int64   `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value  uint32  `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64  `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value int32   `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64   `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
}

func (x *NumberMessage) Reset() {
	*x = NumberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberMessage) ProtoMessage() {}

func (x *NumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberMessage.ProtoReflect.Descriptor instead.
func (*NumberMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{2}
}

func (x *NumberMessage) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *NumberMessage) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *NumberMessage) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *NumberMessage) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *NumberMessage) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *NumberMessage) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *NumberMessage) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *NumberMessage) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *NumberMessage) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *NumberMessage) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *NumberMessage) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *NumberMessage) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

type NotLoggingNumberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValue    float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	DoubleValue   float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	Int32Value    int32   `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value   uint32  `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   uint64  `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value   int32   `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value   int64   `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value  uint32  `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64  `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value int32   `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64   `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
}

func (x *NotLoggingNumberMessage) Reset() {
	*x = NotLoggingNumberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingNumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingNumberMessage) ProtoMessage() {}

func (x *NotLoggingNumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingNumberMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingNumberMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{3}
}

func (x *NotLoggingNumberMessage) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *NotLoggingNumberMessage) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

type RepeatedNumberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValues    []float32 `protobuf:"fixed32,1,rep,packed,name=float_values,json=floatValues,proto3" json:"float_values,omitempty"`
	DoubleValues   []float64 `protobuf:"fixed64,2,rep,packed,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	Int32Values    []int32   `protobuf:"varint,3,rep,packed,name=int32_values,json=int32Values,proto3" json:"int32_values,omitempty"`
	Int64Values    []int64   `protobuf:"varint,4,rep,packed,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	Uint32Values   []uint32  `protobuf:"varint,5,rep,packed,name=uint32_values,json=uint32Values,proto3" json:"uint32_values,omitempty"`
	Uint64Values   []uint64  `protobuf:"varint,6,rep,packed,name=uint64_values,json=uint64Values,proto3" json:"uint64_values,omitempty"`
	Sint32Values   []int32   `protobuf:"zigzag32,7,rep,packed,name=sint32_values,json=sint32Values,proto3" json:"sint32_values,omitempty"`
	Sint64Values   []int64   `protobuf:"zigzag64,8,rep,packed,name=sint64_values,json=sint64Values,proto3" json:"sint64_values,omitempty"`
	Fixed32Values  []uint32  `protobuf:"fixed32,9,rep,packed,name=fixed32_values,json=fixed32Values,proto3" json:"fixed32_values,omitempty"`
	Fixed64Values  []uint64  `protobuf:"fixed64,10,rep,packed,name=fixed64_values,json=fixed64Values,proto3" json:"fixed64_values,omitempty"`
	Sfixed32Values []int32   `protobuf:"fixed32,11,rep,packed,name=sfixed32_values,json=sfixed32Values,proto3" json:"sfixed32_values,omitempty"`
	Sfixed64Values []int64   `protobuf:"fixed64,12,rep,packed,name=sfixed64_values,json=sfixed64Values,proto3" json:"sfixed64_values,omitempty"`
}

func (x *RepeatedNumberMessage) Reset() {
	*x = RepeatedNumberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedNumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedNumberMessage) ProtoMessage() {}

func (x *RepeatedNumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedNumberMessage.ProtoReflect.Descriptor instead.
func (*RepeatedNumberMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{4}
}

func (x *RepeatedNumberMessage) GetFloatValues() []float32 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *RepeatedNumberMessage) GetDoubleValues() []float64 {
	if x != nil {
		return x.DoubleValues
	}
	return nil
}

func (x *RepeatedNumberMessage) GetInt32Values() []int32 {
	if x != nil {
		return x.Int32Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetInt64Values() []int64 {
	if x != nil {
		return x.Int64Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetUint32Values() []uint32 {
	if x != nil {
		return x.Uint32Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetUint64Values() []uint64 {
	if x != nil {
		return x.Uint64Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetSint32Values() []int32 {
	if x != nil {
		return x.Sint32Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetSint64Values() []int64 {
	if x != nil {
		return x.Sint64Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetFixed32Values() []uint32 {
	if x != nil {
		return x.Fixed32Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetFixed64Values() []uint64 {
	if x != nil {
		return x.Fixed64Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetSfixed32Values() []int32 {
	if x != nil {
		return x.Sfixed32Values
	}
	return nil
}

func (x *RepeatedNumberMessage) GetSfixed64Values() []int64 {
	if x != nil {
		return x.Sfixed64Values
	}
	return nil
}

type NotLoggingRepeatedNumberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValues    []float32 `protobuf:"fixed32,1,rep,packed,name=float_values,json=floatValues,proto3" json:"float_values,omitempty"`
	DoubleValues   []float64 `protobuf:"fixed64,2,rep,packed,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	Int32Values    []int32   `protobuf:"varint,3,rep,packed,name=int32_values,json=int32Values,proto3" json:"int32_values,omitempty"`
	Int64Values    []int64   `protobuf:"varint,4,rep,packed,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	Uint32Values   []uint32  `protobuf:"varint,5,rep,packed,name=uint32_values,json=uint32Values,proto3" json:"uint32_values,omitempty"`
	Uint64Values   []uint64  `protobuf:"varint,6,rep,packed,name=uint64_values,json=uint64Values,proto3" json:"uint64_values,omitempty"`
	Sint32Values   []int32   `protobuf:"zigzag32,7,rep,packed,name=sint32_values,json=sint32Values,proto3" json:"sint32_values,omitempty"`
	Sint64Values   []int64   `protobuf:"zigzag64,8,rep,packed,name=sint64_values,json=sint64Values,proto3" json:"sint64_values,omitempty"`
	Fixed32Values  []uint32  `protobuf:"fixed32,9,rep,packed,name=fixed32_values,json=fixed32Values,proto3" json:"fixed32_values,omitempty"`
	Fixed64Values  []uint64  `protobuf:"fixed64,10,rep,packed,name=fixed64_values,json=fixed64Values,proto3" json:"fixed64_values,omitempty"`
	Sfixed32Values []int32   `protobuf:"fixed32,11,rep,packed,name=sfixed32_values,json=sfixed32Values,proto3" json:"sfixed32_values,omitempty"`
	Sfixed64Values []int64   `protobuf:"fixed64,12,rep,packed,name=sfixed64_values,json=sfixed64Values,proto3" json:"sfixed64_values,omitempty"`
}

func (x *NotLoggingRepeatedNumberMessage) Reset() {
	*x = NotLoggingRepeatedNumberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingRepeatedNumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingRepeatedNumberMessage) ProtoMessage() {}

func (x *NotLoggingRepeatedNumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingRepeatedNumberMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingRepeatedNumberMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{5}
}

func (x *NotLoggingRepeatedNumberMessage) GetFloatValues() []float32 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetDoubleValues() []float64 {
	if x != nil {
		return x.DoubleValues
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetInt32Values() []int32 {
	if x != nil {
		return x.Int32Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetInt64Values() []int64 {
	if x != nil {
		return x.Int64Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetUint32Values() []uint32 {
	if x != nil {
		return x.Uint32Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetUint64Values() []uint64 {
	if x != nil {
		return x.Uint64Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetSint32Values() []int32 {
	if x != nil {
		return x.Sint32Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetSint64Values() []int64 {
	if x != nil {
		return x.Sint64Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetFixed32Values() []uint32 {
	if x != nil {
		return x.Fixed32Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetFixed64Values() []uint64 {
	if x != nil {
		return x.Fixed64Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetSfixed32Values() []int32 {
	if x != nil {
		return x.Sfixed32Values
	}
	return nil
}

func (x *NotLoggingRepeatedNumberMessage) GetSfixed64Values() []int64 {
	if x != nil {
		return x.Sfixed64Values
	}
	return nil
}

type NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedValue          *NestedMessage_Nested   `protobuf:"bytes,1,opt,name=nested_value,json=nestedValue,proto3" json:"nested_value,omitempty"`
	RepeatedNestedValues []*NestedMessage_Nested `protobuf:"bytes,2,rep,name=repeated_nested_values,json=repeatedNestedValues,proto3" json:"repeated_nested_values,omitempty"`
}

func (x *NestedMessage) Reset() {
	*x = NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessage) ProtoMessage() {}

func (x *NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMessage.ProtoReflect.Descriptor instead.
func (*NestedMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{6}
}

func (x *NestedMessage) GetNestedValue() *NestedMessage_Nested {
	if x != nil {
		return x.NestedValue
	}
	return nil
}

func (x *NestedMessage) GetRepeatedNestedValues() []*NestedMessage_Nested {
	if x != nil {
		return x.RepeatedNestedValues
	}
	return nil
}

type NotLoggingNestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedValue          *NotLoggingNestedMessage_Nested   `protobuf:"bytes,1,opt,name=nested_value,json=nestedValue,proto3" json:"nested_value,omitempty"`
	RepeatedNestedValues []*NotLoggingNestedMessage_Nested `protobuf:"bytes,2,rep,name=repeated_nested_values,json=repeatedNestedValues,proto3" json:"repeated_nested_values,omitempty"`
}

func (x *NotLoggingNestedMessage) Reset() {
	*x = NotLoggingNestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingNestedMessage) ProtoMessage() {}

func (x *NotLoggingNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingNestedMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingNestedMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{7}
}

func (x *NotLoggingNestedMessage) GetNestedValue() *NotLoggingNestedMessage_Nested {
	if x != nil {
		return x.NestedValue
	}
	return nil
}

func (x *NotLoggingNestedMessage) GetRepeatedNestedValues() []*NotLoggingNestedMessage_Nested {
	if x != nil {
		return x.RepeatedNestedValues
	}
	return nil
}

type EnumMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumericEnumValue          NumericEnum          `protobuf:"varint,1,opt,name=numeric_enum_value,json=numericEnumValue,proto3,enum=kazegusuri.zapmarshaler.example.NumericEnum" json:"numeric_enum_value,omitempty"`
	RepeatedNumericEnumValues []NumericEnum        `protobuf:"varint,2,rep,packed,name=repeated_numeric_enum_values,json=repeatedNumericEnumValues,proto3,enum=kazegusuri.zapmarshaler.example.NumericEnum" json:"repeated_numeric_enum_values,omitempty"`
	AliasedEnumValue          AliasedEnum          `protobuf:"varint,3,opt,name=aliased_enum_value,json=aliasedEnumValue,proto3,enum=kazegusuri.zapmarshaler.example.AliasedEnum" json:"aliased_enum_value,omitempty"`
	NestedEnumValue           EnumMessage_Nested   `protobuf:"varint,4,opt,name=nested_enum_value,json=nestedEnumValue,proto3,enum=kazegusuri.zapmarshaler.example.EnumMessage_Nested" json:"nested_enum_value,omitempty"`
	RepeatedNestedEnumValues  []EnumMessage_Nested `protobuf:"varint,5,rep,packed,name=repeated_nested_enum_values,json=repeatedNestedEnumValues,proto3,enum=kazegusuri.zapmarshaler.example.EnumMessage_Nested" json:"repeated_nested_enum_values,omitempty"`
}

func (x *EnumMessage) Reset() {
	*x = EnumMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumMessage) ProtoMessage() {}

func (x *EnumMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumMessage.ProtoReflect.Descriptor instead.
func (*EnumMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{8}
}

func (x *EnumMessage) GetNumericEnumValue() NumericEnum {
	if x != nil {
		return x.NumericEnumValue
	}
	return NumericEnum_ZERO
}

func (x *EnumMessage) GetRepeatedNumericEnumValues() []NumericEnum {
	if x != nil {
		return x.RepeatedNumericEnumValues
	}
	return nil
}

func (x *EnumMessage) GetAliasedEnumValue() AliasedEnum {
	if x != nil {
		return x.AliasedEnumValue
	}
	return AliasedEnum_UNKNOWN
}

func (x *EnumMessage) GetNestedEnumValue() EnumMessage_Nested {
	if x != nil {
		return x.NestedEnumValue
	}
	return EnumMessage_UNKNOWN
}

func (x *EnumMessage) GetRepeatedNestedEnumValues() []EnumMessage_Nested {
	if x != nil {
		return x.RepeatedNestedEnumValues
	}
	return nil
}

type NotLoggingEnumMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumericEnumValue          NumericEnum                    `protobuf:"varint,1,opt,name=numeric_enum_value,json=numericEnumValue,proto3,enum=kazegusuri.zapmarshaler.example.NumericEnum" json:"numeric_enum_value,omitempty"`
	RepeatedNumericEnumValues []NumericEnum                  `protobuf:"varint,2,rep,packed,name=repeated_numeric_enum_values,json=repeatedNumericEnumValues,proto3,enum=kazegusuri.zapmarshaler.example.NumericEnum" json:"repeated_numeric_enum_values,omitempty"`
	AliasedEnumValue          AliasedEnum                    `protobuf:"varint,3,opt,name=aliased_enum_value,json=aliasedEnumValue,proto3,enum=kazegusuri.zapmarshaler.example.AliasedEnum" json:"aliased_enum_value,omitempty"`
	NestedEnumValue           NotLoggingEnumMessage_Nested   `protobuf:"varint,4,opt,name=nested_enum_value,json=nestedEnumValue,proto3,enum=kazegusuri.zapmarshaler.example.NotLoggingEnumMessage_Nested" json:"nested_enum_value,omitempty"`
	RepeatedNestedEnumValues  []NotLoggingEnumMessage_Nested `protobuf:"varint,5,rep,packed,name=repeated_nested_enum_values,json=repeatedNestedEnumValues,proto3,enum=kazegusuri.zapmarshaler.example.NotLoggingEnumMessage_Nested" json:"repeated_nested_enum_values,omitempty"`
}

func (x *NotLoggingEnumMessage) Reset() {
	*x = NotLoggingEnumMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingEnumMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingEnumMessage) ProtoMessage() {}

func (x *NotLoggingEnumMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingEnumMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingEnumMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{9}
}

func (x *NotLoggingEnumMessage) GetNumericEnumValue() NumericEnum {
	if x != nil {
		return x.NumericEnumValue
	}
	return NumericEnum_ZERO
}

func (x *NotLoggingEnumMessage) GetRepeatedNumericEnumValues() []NumericEnum {
	if x != nil {
		return x.RepeatedNumericEnumValues
	}
	return nil
}

func (x *NotLoggingEnumMessage) GetAliasedEnumValue() AliasedEnum {
	if x != nil {
		return x.AliasedEnumValue
	}
	return AliasedEnum_UNKNOWN
}

func (x *NotLoggingEnumMessage) GetNestedEnumValue() NotLoggingEnumMessage_Nested {
	if x != nil {
		return x.NestedEnumValue
	}
	return NotLoggingEnumMessage_UNKNOWN
}

func (x *NotLoggingEnumMessage) GetRepeatedNestedEnumValues() []NotLoggingEnumMessage_Nested {
	if x != nil {
		return x.RepeatedNestedEnumValues
	}
	return nil
}

type Oneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofValue:
	//	*Oneof_Int32Value
	//	*Oneof_StringValue
	OneofValue isOneof_OneofValue `protobuf_oneof:"oneof_value"`
}

func (x *Oneof) Reset() {
	*x = Oneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oneof) ProtoMessage() {}

func (x *Oneof) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oneof.ProtoReflect.Descriptor instead.
func (*Oneof) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{10}
}

func (m *Oneof) GetOneofValue() isOneof_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (x *Oneof) GetInt32Value() int32 {
	if x, ok := x.GetOneofValue().(*Oneof_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *Oneof) GetStringValue() string {
	if x, ok := x.GetOneofValue().(*Oneof_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isOneof_OneofValue interface {
	isOneof_OneofValue()
}

type Oneof_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Oneof_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*Oneof_Int32Value) isOneof_OneofValue() {}

func (*Oneof_StringValue) isOneof_OneofValue() {}

type OneofMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofValue:
	//	*OneofMessage_Int32Value
	//	*OneofMessage_StringValue
	OneofValue          isOneofMessage_OneofValue `protobuf_oneof:"oneof_value"`
	RepeatedOneofValues []*Oneof                  `protobuf:"bytes,3,rep,name=repeated_oneof_values,json=repeatedOneofValues,proto3" json:"repeated_oneof_values,omitempty"`
}

func (x *OneofMessage) Reset() {
	*x = OneofMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofMessage) ProtoMessage() {}

func (x *OneofMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofMessage.ProtoReflect.Descriptor instead.
func (*OneofMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{11}
}

func (m *OneofMessage) GetOneofValue() isOneofMessage_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (x *OneofMessage) GetInt32Value() int32 {
	if x, ok := x.GetOneofValue().(*OneofMessage_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *OneofMessage) GetStringValue() string {
	if x, ok := x.GetOneofValue().(*OneofMessage_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *OneofMessage) GetRepeatedOneofValues() []*Oneof {
	if x != nil {
		return x.RepeatedOneofValues
	}
	return nil
}

type isOneofMessage_OneofValue interface {
	isOneofMessage_OneofValue()
}

type OneofMessage_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type OneofMessage_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*OneofMessage_Int32Value) isOneofMessage_OneofValue() {}

func (*OneofMessage_StringValue) isOneofMessage_OneofValue() {}

type NotLoggingOneofMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofValue:
	//	*NotLoggingOneofMessage_Int32Value
	//	*NotLoggingOneofMessage_StringValue
	OneofValue          isNotLoggingOneofMessage_OneofValue `protobuf_oneof:"oneof_value"`
	RepeatedOneofValues []*Oneof                            `protobuf:"bytes,3,rep,name=repeated_oneof_values,json=repeatedOneofValues,proto3" json:"repeated_oneof_values,omitempty"`
}

func (x *NotLoggingOneofMessage) Reset() {
	*x = NotLoggingOneofMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingOneofMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingOneofMessage) ProtoMessage() {}

func (x *NotLoggingOneofMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingOneofMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingOneofMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{12}
}

func (m *NotLoggingOneofMessage) GetOneofValue() isNotLoggingOneofMessage_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (x *NotLoggingOneofMessage) GetInt32Value() int32 {
	if x, ok := x.GetOneofValue().(*NotLoggingOneofMessage_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *NotLoggingOneofMessage) GetStringValue() string {
	if x, ok := x.GetOneofValue().(*NotLoggingOneofMessage_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *NotLoggingOneofMessage) GetRepeatedOneofValues() []*Oneof {
	if x != nil {
		return x.RepeatedOneofValues
	}
	return nil
}

type isNotLoggingOneofMessage_OneofValue interface {
	isNotLoggingOneofMessage_OneofValue()
}

type NotLoggingOneofMessage_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type NotLoggingOneofMessage_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*NotLoggingOneofMessage_Int32Value) isNotLoggingOneofMessage_OneofValue() {}

func (*NotLoggingOneofMessage_StringValue) isNotLoggingOneofMessage_OneofValue() {}

type MapMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MappedValue       map[int32]string          `protobuf:"bytes,1,rep,name=mapped_value,json=mappedValue,proto3" json:"mapped_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MappedEnumValue   map[string]NumericEnum    `protobuf:"bytes,2,rep,name=mapped_enum_value,json=mappedEnumValue,proto3" json:"mapped_enum_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=kazegusuri.zapmarshaler.example.NumericEnum"`
	MappedNestedValue map[string]*NestedMessage `protobuf:"bytes,3,rep,name=mapped_nested_value,json=mappedNestedValue,proto3" json:"mapped_nested_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapMessage) Reset() {
	*x = MapMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMessage) ProtoMessage() {}

func (x *MapMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMessage.ProtoReflect.Descriptor instead.
func (*MapMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{13}
}

func (x *MapMessage) GetMappedValue() map[int32]string {
	if x != nil {
		return x.MappedValue
	}
	return nil
}

func (x *MapMessage) GetMappedEnumValue() map[string]NumericEnum {
	if x != nil {
		return x.MappedEnumValue
	}
	return nil
}

func (x *MapMessage) GetMappedNestedValue() map[string]*NestedMessage {
	if x != nil {
		return x.MappedNestedValue
	}
	return nil
}

type NotLoggingMapMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MappedValue       map[int32]string          `protobuf:"bytes,1,rep,name=mapped_value,json=mappedValue,proto3" json:"mapped_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MappedEnumValue   map[string]NumericEnum    `protobuf:"bytes,2,rep,name=mapped_enum_value,json=mappedEnumValue,proto3" json:"mapped_enum_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=kazegusuri.zapmarshaler.example.NumericEnum"`
	MappedNestedValue map[string]*NestedMessage `protobuf:"bytes,3,rep,name=mapped_nested_value,json=mappedNestedValue,proto3" json:"mapped_nested_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NotLoggingMapMessage) Reset() {
	*x = NotLoggingMapMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingMapMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingMapMessage) ProtoMessage() {}

func (x *NotLoggingMapMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingMapMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingMapMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{14}
}

func (x *NotLoggingMapMessage) GetMappedValue() map[int32]string {
	if x != nil {
		return x.MappedValue
	}
	return nil
}

func (x *NotLoggingMapMessage) GetMappedEnumValue() map[string]NumericEnum {
	if x != nil {
		return x.MappedEnumValue
	}
	return nil
}

func (x *NotLoggingMapMessage) GetMappedNestedValue() map[string]*NestedMessage {
	if x != nil {
		return x.MappedNestedValue
	}
	return nil
}

type JsonNameOptionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=renamed_value,proto3" json:"string_value,omitempty"`
}

func (x *JsonNameOptionMessage) Reset() {
	*x = JsonNameOptionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonNameOptionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonNameOptionMessage) ProtoMessage() {}

func (x *JsonNameOptionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonNameOptionMessage.ProtoReflect.Descriptor instead.
func (*JsonNameOptionMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{15}
}

func (x *JsonNameOptionMessage) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type NotLoggingJsonNameOptionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=renamed_value,proto3" json:"string_value,omitempty"`
}

func (x *NotLoggingJsonNameOptionMessage) Reset() {
	*x = NotLoggingJsonNameOptionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingJsonNameOptionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingJsonNameOptionMessage) ProtoMessage() {}

func (x *NotLoggingJsonNameOptionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingJsonNameOptionMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingJsonNameOptionMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{16}
}

func (x *NotLoggingJsonNameOptionMessage) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type WellKnownTypeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration  *duration.Duration   `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WellKnownTypeMessage) Reset() {
	*x = WellKnownTypeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownTypeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownTypeMessage) ProtoMessage() {}

func (x *WellKnownTypeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownTypeMessage.ProtoReflect.Descriptor instead.
func (*WellKnownTypeMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{17}
}

func (x *WellKnownTypeMessage) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *WellKnownTypeMessage) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type NotLoggingWellKnownTypeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration  *duration.Duration   `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *NotLoggingWellKnownTypeMessage) Reset() {
	*x = NotLoggingWellKnownTypeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingWellKnownTypeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingWellKnownTypeMessage) ProtoMessage() {}

func (x *NotLoggingWellKnownTypeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingWellKnownTypeMessage.ProtoReflect.Descriptor instead.
func (*NotLoggingWellKnownTypeMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{18}
}

func (x *NotLoggingWellKnownTypeMessage) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *NotLoggingWellKnownTypeMessage) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type MixedLoggingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BoolValue   bool   `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	Int32Value  int32  `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
}

func (x *MixedLoggingMessage) Reset() {
	*x = MixedLoggingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedLoggingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedLoggingMessage) ProtoMessage() {}

func (x *MixedLoggingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedLoggingMessage.ProtoReflect.Descriptor instead.
func (*MixedLoggingMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{19}
}

func (x *MixedLoggingMessage) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *MixedLoggingMessage) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *MixedLoggingMessage) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

type SkipFieldMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B string `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *SkipFieldMessage) Reset() {
	*x = SkipFieldMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipFieldMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipFieldMessage) ProtoMessage() {}

func (x *SkipFieldMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipFieldMessage.ProtoReflect.Descriptor instead.
func (*SkipFieldMessage) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{20}
}

func (x *SkipFieldMessage) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *SkipFieldMessage) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

type NestedMessage_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Value  int32  `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *NestedMessage_Nested) Reset() {
	*x = NestedMessage_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedMessage_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessage_Nested) ProtoMessage() {}

func (x *NestedMessage_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMessage_Nested.ProtoReflect.Descriptor instead.
func (*NestedMessage_Nested) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{6, 0}
}

func (x *NestedMessage_Nested) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *NestedMessage_Nested) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type NotLoggingNestedMessage_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Value  int32  `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *NotLoggingNestedMessage_Nested) Reset() {
	*x = NotLoggingNestedMessage_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_example_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotLoggingNestedMessage_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLoggingNestedMessage_Nested) ProtoMessage() {}

func (x *NotLoggingNestedMessage_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_examples_example_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLoggingNestedMessage_Nested.ProtoReflect.Descriptor instead.
func (*NotLoggingNestedMessage_Nested) Descriptor() ([]byte, []int) {
	return file_examples_example_proto_rawDescGZIP(), []int{7, 0}
}

func (x *NotLoggingNestedMessage_Nested) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *NotLoggingNestedMessage_Nested) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

var File_examples_example_proto protoreflect.FileDescriptor

var file_examples_example_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75,
	0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x13, 0x7a, 0x61, 0x70, 0x5f, 0x6d,
	0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x61, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x99, 0x04, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xca,
	0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a,
	0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x11, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x42, 0x06,
	0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x0e,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x10, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x17,
	0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb9, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x42, 0x06, 0xca,
	0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08,
	0x01, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x42, 0x06, 0xca,
	0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x11, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x12, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x07, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0e,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x06, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0f, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x10, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe3, 0x03,
	0x0a, 0x1f, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x11,
	0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0d, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0e, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x10, 0x52, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x61,
	0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x73, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75,
	0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x06,
	0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x06,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xca, 0xc2, 0x1f,
	0x02, 0x08, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x29, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x17, 0x4e,
	0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b,
	0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x7a,
	0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x14, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x4c, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe4, 0x04, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x62, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b, 0x61,
	0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08,
	0x01, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b, 0x61, 0x7a, 0x65,
	0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52,
	0x19, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x12, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73,
	0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x10, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x67,
	0x0a, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6b, 0x61, 0x7a, 0x65,
	0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x06,
	0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x7a, 0x0a, 0x1b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6b,
	0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x18, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xda, 0x04, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b,
	0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6d, 0x0a, 0x1c,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e,
	0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x19, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75,
	0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x10, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e,
	0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x0f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75,
	0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x18, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x31, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x6e, 0x0a, 0x05, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x29, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca,
	0xc2, 0x1f, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08,
	0x01, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x62, 0x0a, 0x15,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x61,
	0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x6e,
	0x65, 0x6f, 0x66, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x13, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xcb, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x65, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a,
	0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x05,
	0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x0c,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e,
	0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61,
	0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x7a, 0x0a, 0x13, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67,
	0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xca, 0xc2,
	0x1f, 0x02, 0x08, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61,
	0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x16, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72,
	0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9f, 0x05, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d,
	0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d,
	0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x7c, 0x0a, 0x13, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67,
	0x75, 0x73, 0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73, 0x75, 0x72, 0x69, 0x2e,
	0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x16, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x7a, 0x65, 0x67, 0x75, 0x73,
	0x75, 0x72, 0x69, 0x2e, 0x7a, 0x61, 0x70, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x44, 0x0a, 0x15, 0x4a, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x1f, 0x4e, 0x6f, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x14, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x4e, 0x6f,
	0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x86, 0x01,
	0x0a, 0x13, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xc2, 0x1f,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xca, 0xc2, 0x1f, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x14, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0xc2, 0x1f, 0x02, 0x10, 0x01, 0x52, 0x01, 0x62, 0x2a, 0x29,
	0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a,
	0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x0b, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_examples_example_proto_rawDescOnce sync.Once
	file_examples_example_proto_rawDescData = file_examples_example_proto_rawDesc
)

func file_examples_example_proto_rawDescGZIP() []byte {
	file_examples_example_proto_rawDescOnce.Do(func() {
		file_examples_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_examples_example_proto_rawDescData)
	})
	return file_examples_example_proto_rawDescData
}

var file_examples_example_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_examples_example_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_examples_example_proto_goTypes = []interface{}{
	(NumericEnum)(0),                        // 0: kazegusuri.zapmarshaler.example.NumericEnum
	(AliasedEnum)(0),                        // 1: kazegusuri.zapmarshaler.example.AliasedEnum
	(EnumMessage_Nested)(0),                 // 2: kazegusuri.zapmarshaler.example.EnumMessage.Nested
	(NotLoggingEnumMessage_Nested)(0),       // 3: kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.Nested
	(*SimpleMessage)(nil),                   // 4: kazegusuri.zapmarshaler.example.SimpleMessage
	(*NotLoggingSimpleMessage)(nil),         // 5: kazegusuri.zapmarshaler.example.NotLoggingSimpleMessage
	(*NumberMessage)(nil),                   // 6: kazegusuri.zapmarshaler.example.NumberMessage
	(*NotLoggingNumberMessage)(nil),         // 7: kazegusuri.zapmarshaler.example.NotLoggingNumberMessage
	(*RepeatedNumberMessage)(nil),           // 8: kazegusuri.zapmarshaler.example.RepeatedNumberMessage
	(*NotLoggingRepeatedNumberMessage)(nil), // 9: kazegusuri.zapmarshaler.example.NotLoggingRepeatedNumberMessage
	(*NestedMessage)(nil),                   // 10: kazegusuri.zapmarshaler.example.NestedMessage
	(*NotLoggingNestedMessage)(nil),         // 11: kazegusuri.zapmarshaler.example.NotLoggingNestedMessage
	(*EnumMessage)(nil),                     // 12: kazegusuri.zapmarshaler.example.EnumMessage
	(*NotLoggingEnumMessage)(nil),           // 13: kazegusuri.zapmarshaler.example.NotLoggingEnumMessage
	(*Oneof)(nil),                           // 14: kazegusuri.zapmarshaler.example.Oneof
	(*OneofMessage)(nil),                    // 15: kazegusuri.zapmarshaler.example.OneofMessage
	(*NotLoggingOneofMessage)(nil),          // 16: kazegusuri.zapmarshaler.example.NotLoggingOneofMessage
	(*MapMessage)(nil),                      // 17: kazegusuri.zapmarshaler.example.MapMessage
	(*NotLoggingMapMessage)(nil),            // 18: kazegusuri.zapmarshaler.example.NotLoggingMapMessage
	(*JsonNameOptionMessage)(nil),           // 19: kazegusuri.zapmarshaler.example.JsonNameOptionMessage
	(*NotLoggingJsonNameOptionMessage)(nil), // 20: kazegusuri.zapmarshaler.example.NotLoggingJsonNameOptionMessage
	(*WellKnownTypeMessage)(nil),            // 21: kazegusuri.zapmarshaler.example.WellKnownTypeMessage
	(*NotLoggingWellKnownTypeMessage)(nil),  // 22: kazegusuri.zapmarshaler.example.NotLoggingWellKnownTypeMessage
	(*MixedLoggingMessage)(nil),             // 23: kazegusuri.zapmarshaler.example.MixedLoggingMessage
	(*SkipFieldMessage)(nil),                // 24: kazegusuri.zapmarshaler.example.SkipFieldMessage
	(*NestedMessage_Nested)(nil),            // 25: kazegusuri.zapmarshaler.example.NestedMessage.Nested
	(*NotLoggingNestedMessage_Nested)(nil),  // 26: kazegusuri.zapmarshaler.example.NotLoggingNestedMessage.Nested
	nil,                                     // 27: kazegusuri.zapmarshaler.example.MapMessage.MappedValueEntry
	nil,                                     // 28: kazegusuri.zapmarshaler.example.MapMessage.MappedEnumValueEntry
	nil,                                     // 29: kazegusuri.zapmarshaler.example.MapMessage.MappedNestedValueEntry
	nil,                                     // 30: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedValueEntry
	nil,                                     // 31: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedEnumValueEntry
	nil,                                     // 32: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedNestedValueEntry
	(*duration.Duration)(nil),               // 33: google.protobuf.Duration
	(*timestamp.Timestamp)(nil),             // 34: google.protobuf.Timestamp
}
var file_examples_example_proto_depIdxs = []int32{
	25, // 0: kazegusuri.zapmarshaler.example.NestedMessage.nested_value:type_name -> kazegusuri.zapmarshaler.example.NestedMessage.Nested
	25, // 1: kazegusuri.zapmarshaler.example.NestedMessage.repeated_nested_values:type_name -> kazegusuri.zapmarshaler.example.NestedMessage.Nested
	26, // 2: kazegusuri.zapmarshaler.example.NotLoggingNestedMessage.nested_value:type_name -> kazegusuri.zapmarshaler.example.NotLoggingNestedMessage.Nested
	26, // 3: kazegusuri.zapmarshaler.example.NotLoggingNestedMessage.repeated_nested_values:type_name -> kazegusuri.zapmarshaler.example.NotLoggingNestedMessage.Nested
	0,  // 4: kazegusuri.zapmarshaler.example.EnumMessage.numeric_enum_value:type_name -> kazegusuri.zapmarshaler.example.NumericEnum
	0,  // 5: kazegusuri.zapmarshaler.example.EnumMessage.repeated_numeric_enum_values:type_name -> kazegusuri.zapmarshaler.example.NumericEnum
	1,  // 6: kazegusuri.zapmarshaler.example.EnumMessage.aliased_enum_value:type_name -> kazegusuri.zapmarshaler.example.AliasedEnum
	2,  // 7: kazegusuri.zapmarshaler.example.EnumMessage.nested_enum_value:type_name -> kazegusuri.zapmarshaler.example.EnumMessage.Nested
	2,  // 8: kazegusuri.zapmarshaler.example.EnumMessage.repeated_nested_enum_values:type_name -> kazegusuri.zapmarshaler.example.EnumMessage.Nested
	0,  // 9: kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.numeric_enum_value:type_name -> kazegusuri.zapmarshaler.example.NumericEnum
	0,  // 10: kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.repeated_numeric_enum_values:type_name -> kazegusuri.zapmarshaler.example.NumericEnum
	1,  // 11: kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.aliased_enum_value:type_name -> kazegusuri.zapmarshaler.example.AliasedEnum
	3,  // 12: kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.nested_enum_value:type_name -> kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.Nested
	3,  // 13: kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.repeated_nested_enum_values:type_name -> kazegusuri.zapmarshaler.example.NotLoggingEnumMessage.Nested
	14, // 14: kazegusuri.zapmarshaler.example.OneofMessage.repeated_oneof_values:type_name -> kazegusuri.zapmarshaler.example.Oneof
	14, // 15: kazegusuri.zapmarshaler.example.NotLoggingOneofMessage.repeated_oneof_values:type_name -> kazegusuri.zapmarshaler.example.Oneof
	27, // 16: kazegusuri.zapmarshaler.example.MapMessage.mapped_value:type_name -> kazegusuri.zapmarshaler.example.MapMessage.MappedValueEntry
	28, // 17: kazegusuri.zapmarshaler.example.MapMessage.mapped_enum_value:type_name -> kazegusuri.zapmarshaler.example.MapMessage.MappedEnumValueEntry
	29, // 18: kazegusuri.zapmarshaler.example.MapMessage.mapped_nested_value:type_name -> kazegusuri.zapmarshaler.example.MapMessage.MappedNestedValueEntry
	30, // 19: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.mapped_value:type_name -> kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedValueEntry
	31, // 20: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.mapped_enum_value:type_name -> kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedEnumValueEntry
	32, // 21: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.mapped_nested_value:type_name -> kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedNestedValueEntry
	33, // 22: kazegusuri.zapmarshaler.example.WellKnownTypeMessage.duration:type_name -> google.protobuf.Duration
	34, // 23: kazegusuri.zapmarshaler.example.WellKnownTypeMessage.timestamp:type_name -> google.protobuf.Timestamp
	33, // 24: kazegusuri.zapmarshaler.example.NotLoggingWellKnownTypeMessage.duration:type_name -> google.protobuf.Duration
	34, // 25: kazegusuri.zapmarshaler.example.NotLoggingWellKnownTypeMessage.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 26: kazegusuri.zapmarshaler.example.MapMessage.MappedEnumValueEntry.value:type_name -> kazegusuri.zapmarshaler.example.NumericEnum
	10, // 27: kazegusuri.zapmarshaler.example.MapMessage.MappedNestedValueEntry.value:type_name -> kazegusuri.zapmarshaler.example.NestedMessage
	0,  // 28: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedEnumValueEntry.value:type_name -> kazegusuri.zapmarshaler.example.NumericEnum
	10, // 29: kazegusuri.zapmarshaler.example.NotLoggingMapMessage.MappedNestedValueEntry.value:type_name -> kazegusuri.zapmarshaler.example.NestedMessage
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_examples_example_proto_init() }
func file_examples_example_proto_init() {
	if File_examples_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_examples_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingSimpleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingNumberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedNumberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingRepeatedNumberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingNestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingEnumMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingOneofMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingMapMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonNameOptionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingJsonNameOptionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnownTypeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingWellKnownTypeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedLoggingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipFieldMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedMessage_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_example_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotLoggingNestedMessage_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_examples_example_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Oneof_Int32Value)(nil),
		(*Oneof_StringValue)(nil),
	}
	file_examples_example_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*OneofMessage_Int32Value)(nil),
		(*OneofMessage_StringValue)(nil),
	}
	file_examples_example_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*NotLoggingOneofMessage_Int32Value)(nil),
		(*NotLoggingOneofMessage_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_examples_example_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_examples_example_proto_goTypes,
		DependencyIndexes: file_examples_example_proto_depIdxs,
		EnumInfos:         file_examples_example_proto_enumTypes,
		MessageInfos:      file_examples_example_proto_msgTypes,
	}.Build()
	File_examples_example_proto = out.File
	file_examples_example_proto_rawDesc = nil
	file_examples_example_proto_goTypes = nil
	file_examples_example_proto_depIdxs = nil
}
